#! /usr/bin/env python3
import argparse
import os
import subprocess
import time

class vidSession:
  def __init__(self, dest):
    self.dest=dest
    print("[STRTVID] {}".format(dest))
    self.proc = subprocess.Popen(["ffmpeg", "-y", "-f", "x11grab", "-video_size", os.getenv('X_RES'), "-r", "15", "-i", ":99", "-codec:v", "libx264", dest], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
  def stop(self):
    print("[STOPVID] {}".format(self.dest))
    out, err = self.proc.communicate(input=b'q')
    code = self.proc.returncode
    cmd = self.proc.args
    return code, cmd, out, err

def sendkeys(*args):
    for a in args:
        if a[0]=="!":
            sendtext(a[1:])
        else:
            sendkeystrokes(a)
        time.sleep(1)

def sendtext(str):
    sendCR = False
    if str[-4:] == "<CR>":
        str = str[:-4]
        sendCR = True
    subprocess.call(["xdotool", "type", "--delay", "100", str])
    if sendCR:
        subprocess.call(["xdotool", "key", "KP_Enter"])

def contains(lelist, lestring):
    for x in lelist:
        if lestring.count(x):
            return True
    return False

def sendkeystrokes(keystring):
    parts = keystring.split(" ")
    out = []
    for p in parts:
        if contains("+_", p) or p=="Escape" or p=="space" or p=="Down":
            out.append(p)
        else:
            out += [x for x in p]
    dosend(out)

def dosend(keys):
    subprocess.call(["xdotool", "key", "--delay", "100"]+keys)

def startVid(videoName):
    return vidSession("/".join([shotsdir,videoName])+".mp4")

def makeShot(shotName):
    subprocess.call(["scrot", "--overwrite", "/".join([shotsdir,shotName])])
    print("[SCRSHOT] {}".format(shotName))

def setTheme(themeName):
    print("[SWTHEME] {}".format(themeName))
    sendkeys(
            "Ctrl+k Ctrl+t",
            "!"+themeName+"<CR>")
    
def openFile(fileName):
    print("[OPENFIL] {}".format(fileName))
    sendCmd(fileName)

def sendCmd(command):
    sendkeys(
            "Ctrl+p",
            "!"+command+"<CR>"
            )

def editorCmd(command):
    print("[EDTRCMD] {}".format(command))
    sendCmd(">"+command)

def lineJump(lineNo):
    print("[JMPLINE] {}".format(lineNo))
    sendCmd(":"+lineNo)

parser = argparse.ArgumentParser()
parser.add_argument("--samplefile", required=True)
parser.add_argument("--fileline", default=0)
parser.add_argument('themes', nargs=argparse.REMAINDER)

# Parse arguments.
args = parser.parse_args()

if len(args.themes) == 0:
    print("no theme name provided, usage: makeshots --repo <repo URL> --samplefile <relative path> <theme names>...")
    exit(1)

shotsdir = "/home/codeuser/shots"
print("[INITDIR]")
for dr in [shotsdir]:
    if not os.path.exists(dr):
        os.mkdir(dr)
openFile(args.samplefile)
if int(args.fileline) > 0:
    lineJump(args.fileline)
shots = {}
for theme in args.themes:
    themeSpec = theme.split(",",1)
    if len(themeSpec) == 2:
        shots[themeSpec[0]]=themeSpec[1]
    else:
        shots[theme]=theme
#vid = startVid("testvid")
for key, value in shots.items():
    setTheme(key)
    makeShot(value)
#code, cmd, out, err = vid.stop()